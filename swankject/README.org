
* IN-PROGRESS stuff to do [25%]
** DONE coding the agent [100%]
CLOSED: [2012-08-22 Wed 13:42]
*** DONE agent code [100%]
CLOSED: [2012-08-22 Wed 13:37]
**** DONE interface of the callback [100%]
CLOSED: [2012-08-22 Wed 13:37]
***** DONE add the id of the current thread to all the methods
CLOSED: [2012-08-22 Wed 13:37]

***** CANCELLED put java classes in a proper package
CLOSED: [2012-08-17 Fri 14:44]

won't do

tried, but the aspects were not working anymore, so rollbacked to no
packages

do we really need it ? I don't think so as the target will probably
specified explicitly (ie com.my.company.*), instead of allowing everything
but a few restricted packages (ie don't weave java.*)

***** DONE before [100%]
CLOSED: [2012-08-14 Tue 18:01]
****** DONE method (fully qualified name) [%]
CLOSED: [2012-08-14 Tue 17:54]
****** DONE arguments [%]
CLOSED: [2012-08-14 Tue 18:01]
***** DONE after [100%]
CLOSED: [2012-08-14 Tue 18:08]
****** DONE result [%]
CLOSED: [2012-08-14 Tue 18:08]
***** DONE afterThrow [%]
CLOSED: [2012-08-14 Tue 18:33]

***** DONE rename AopContext => AspectjConfig
CLOSED: [2012-08-17 Fri 13:43]

**** CANCELLED let the user specify explicitly what packages should be weaved (with properties) [100%]
CLOSED: [2012-08-18 Sat 18:32]

won't do, it will be done by configuring the =aop.xml=

***** DONE get a sys prop in the agent to get ONE package
CLOSED: [2012-08-17 Fri 14:59]

***** DONE get as sys prop in the agent to get MULTIPLE package
CLOSED: [2012-08-17 Fri 15:13]

***** DONE move the target classes in packages, as it's the way we will select the woven classes
CLOSED: [2012-08-17 Fri 15:56]

***** DONE create a new class in a different package to test the selectiveness of the aspects
CLOSED: [2012-08-17 Fri 16:11]
***** CANCELLED code the agent so that we weave only the given package(s) [100%]
CLOSED: [2012-08-18 Sat 02:48]

Can't do.

It was a wrong lead, as I don't know how to get pkg to weave after
compiling the aspect.

To do that we should use =aop.xml=, which allow to specify in an xml
file what to intercept (classes, method calls, ...)

****** DONE hard code the agent so that it weaves only the A class
CLOSED: [2012-08-17 Fri 16:53]
****** CANCELLED get the property given by the user to get which package to weave
CLOSED: [2012-08-18 Sat 02:48]

***** DONE need to rework all the stuff to declare the pointcut in the aop.xml instead of the Aspect.java [100%]
CLOSED: [2012-08-18 Sat 03:19]

****** DONE backup the current aspect has it has valuable code in it
CLOSED: [2012-08-18 Sat 02:55]
****** DONE to the actual rewrite with aop.xml
CLOSED: [2012-08-18 Sat 03:19]

**** DONE add the start of swank in a different thread when the agent is "activated" [100%]
CLOSED: [2012-08-21 Tue 13:30]

***** DONE leinification of the project as it begins to need a lot of deps
CLOSED: [2012-08-19 Sun 03:02]

***** DONE add the swank deps in project.clj
CLOSED: [2012-08-21 Tue 13:18]

***** DONE code the start the swank server
CLOSED: [2012-08-21 Tue 13:28]

**** DONE simplify the makefile by removing the compile time weaving
CLOSED: [2012-08-17 Fri 15:25]

**** DONE [improvement] we dont need another class to inject the callback, because the code for the aspect will be compiled as a class so we just need to provide a setter
CLOSED: [2012-08-17 Fri 15:32]

**** DONE update the aspect to also log the args
CLOSED: [2012-08-18 Sat 17:51]
**** DONE update the callback interface to match more closely the aspectj wording
CLOSED: [2012-08-18 Sat 18:18]
**** DONE add callback setter to the new aspect
CLOSED: [2012-08-18 Sat 18:31]
**** DONE add some example when connected to the sample app
CLOSED: [2012-08-21 Tue 14:20]
*** DONE add a way to inject the callback to the agent [100%]
CLOSED: [2012-08-22 Wed 12:24]
**** DONE We need to put the Aspect code in a proper pkg
CLOSED: [2012-08-22 Wed 08:18]

Because I don't know how to use default package classes in clojure
**** DONE verify that we can remove the callback and put it again in clj
CLOSED: [2012-08-22 Wed 08:29]
**** DONE implements the callback in clojure
CLOSED: [2012-08-22 Wed 11:53]


*** CANCELLED solve the "aop will intercept anything" problem [%]
CLOSED: [2012-08-22 Wed 13:41]

This problem don't exists yet :)

*** CANCELLED fail fast if the prop =snijure.pgks= has not been given
CLOSED: [2012-08-22 Wed 12:26]

Not relevant anymore

** TODO implement a callback that capture all the method calls [50%]

*** DONE the basic capture of methods call in an atom is working
CLOSED: [2012-09-02 Sun 13:27]


*** DONE test the interception and storing in the atom with a more complex program
CLOSED: [2012-09-07 Fri 09:33]

*** TODO implements the throwing behaviour

*** TODO serialize args/return values along with the method calls [50%]

**** DONE is it possible to merge clojure.xml with XStream xml? => yes! :) [75%]
CLOSED: [2012-09-08 Sat 13:50]

***** DONE how xstream behaves with circular references?
CLOSED: [2012-09-08 Sat 13:50]

it behaves well

***** DONE how clojure.xml behaves with XStream's XML ?
CLOSED: [2012-09-08 Sat 13:49]

it behave badly (adds linebreak)

***** DONE how clojure.data.xml behaves with XStream's XML ?
CLOSED: [2012-09-08 Sat 13:49]

it behave well (year!)

**** TODO need to serialize args and return values

** TODO transverse stuff [50%]

*** DONE rework the .gitignore for the subproject swankject
CLOSED: [2012-08-20 Mon 08:14]

*** TODO refactoring [66%]
**** TODO properly format the java code
**** CANCELLED rename callback => snijureCallback
CLOSED: [2012-08-22 Wed 12:26]

Not really needed

**** DONE rename the project swankject
CLOSED: [2012-08-22 Wed 12:26]

That's because I ve got the warning by leiningen that clojure projects
finishing by 'jure' aren't welcome :)


*** DONE add more tools in the repl (doc, javadoc, ...)
CLOSED: [2012-08-22 Wed 12:33]


*** TODO rename the project (again!) as swank will be replaced by nrepl

** IN-PROGRESS test the method capture with a BigProject [20%]

*** DONE Make BigProject work (at least ONE simple itest)
CLOSED: [2012-09-09 Sun 12:54]

mvn -Dtest=MyITest test
*** IN-PROGRESS find how to pass javaagent args to the itest

The javaagent is not triggered as the fork mode is set to never.
It means that the tests are ran in the same jvm as maven, which as no javagent

**** DONE add some println when starting the agent to understand what's going on
CLOSED: [2012-09-09 Sun 16:14]

*** TODO Run the Big Project work with the agent

*** TODO Collect the data from the Big Project
* TODO nice to have [0%]
** TODO check the license of aspectJ to know if we can embed it

it would allow to embed the aspectj libs, to avoid the user having to
install them
** TODO before/after/afterThrow => around

because we use before/after/afterThrow instead of around
we can read but not modify
it would be nice to be able to modify the args of a method, the return
value, the execption, ...


* TODO ideas [%]

** TODO allow to alter args / return values / exceptions (or even don't throw the exception)

It would be straightforward to change the signature of the Callback, and
the agent code to allow:
- Changing the parameters passed to the intercepted method: Just make
  =before= returns an array of params
- Changing the return value of the intercepted method: just make =after=
  returns a (possibly) modified return value
- Changing the exception, or even changing it to no exception and return
  value instead: just change =afterThrow= to returns an (possibly
  modified) exception (and maybe an additionnal flag to indicate that we
  want to change the exception by a normal return value)
