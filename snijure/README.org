
* IN-PROGRESS stuff to do [0%]

** IN-PROGRESS agent code [75%]
*** TODO interface of the callback [71%]
**** TODO add the id of the current thread to all the methods

**** CANCELLED put java classes in a proper package
CLOSED: [2012-08-17 Fri 14:44]

won't do

tried, but the aspects were not working anymore, so rollbacked to no
packages

do we really need it ? I don't think so as the target will probably
specified explicitly (ie com.my.company.*), instead of allowing everything
but a few restricted packages (ie don't weave java.*)

**** DONE before [100%]
CLOSED: [2012-08-14 Tue 18:01]
***** DONE method (fully qualified name) [%]
CLOSED: [2012-08-14 Tue 17:54]
***** DONE arguments [%]
CLOSED: [2012-08-14 Tue 18:01]
**** DONE after [100%]
CLOSED: [2012-08-14 Tue 18:08]
***** DONE result [%]
CLOSED: [2012-08-14 Tue 18:08]
**** DONE afterThrow [%]
CLOSED: [2012-08-14 Tue 18:33]

**** DONE rename AopContext => AspectjConfig
CLOSED: [2012-08-17 Fri 13:43]

*** CANCELLED let the user specify explicitly what packages should be weaved (with properties) [100%]
CLOSED: [2012-08-18 Sat 18:32]

won't do, it will be done by configuring the =aop.xml=

**** DONE get a sys prop in the agent to get ONE package
CLOSED: [2012-08-17 Fri 14:59]

**** DONE get as sys prop in the agent to get MULTIPLE package
CLOSED: [2012-08-17 Fri 15:13]

**** DONE move the target classes in packages, as it's the way we will select the woven classes
CLOSED: [2012-08-17 Fri 15:56]

**** DONE create a new class in a different package to test the selectiveness of the aspects
CLOSED: [2012-08-17 Fri 16:11]
**** CANCELLED code the agent so that we weave only the given package(s) [100%]
CLOSED: [2012-08-18 Sat 02:48]

Can't do.

It was a wrong lead, as I don't know how to get pkg to weave after
compiling the aspect.

To do that we should use =aop.xml=, which allow to specify in an xml
file what to intercept (classes, method calls, ...)

***** DONE hard code the agent so that it weaves only the A class
CLOSED: [2012-08-17 Fri 16:53]
***** CANCELLED get the property given by the user to get which package to weave
CLOSED: [2012-08-18 Sat 02:48]

**** DONE need to rework all the stuff to declare the pointcut in the aop.xml instead of the Aspect.java [100%]
CLOSED: [2012-08-18 Sat 03:19]

***** DONE backup the current aspect has it has valuable code in it
CLOSED: [2012-08-18 Sat 02:55]
***** DONE to the actual rewrite with aop.xml
CLOSED: [2012-08-18 Sat 03:19]

*** IN-PROGRESS add the start of swank in a different thread when the agent is "activated"
*** DONE simplify the makefile by removing the compile time weaving
CLOSED: [2012-08-17 Fri 15:25]

*** DONE [improvement] we dont need another class to inject the callback, because the code for the aspect will be compiled as a class so we just need to provide a setter
CLOSED: [2012-08-17 Fri 15:32]

*** DONE update the aspect to also log the args
CLOSED: [2012-08-18 Sat 17:51]
*** DONE update the callback interface to match more closely the aspectj wording
CLOSED: [2012-08-18 Sat 18:18]
*** DONE add callback setter to the new aspect
CLOSED: [2012-08-18 Sat 18:31]
** TODO add a way to inject the callback to the agent
** TODO solve the "aop will intercept anything" problem [%]
** TODO fail fast if the prop =snijure.pgks= has not been given
** TODO refactoring [0%]
*** TODO properly format the java code
*** TODO rename callback => snijureCallback
* TODO nice to have [%]
** TODO check the license of aspectJ to know if we can embed it

it would allow to embed the aspectj libs, to avoid the user having to
install them
* TODO ideas [%]

** TODO allow to alter args / return values / exceptions (or even don't throw the exception)

It would be straightforward to change the signature of the Callback, and
the agent code to allow:
- Changing the parameters passed to the intercepted method: Just make
  =before= returns an array of params
- Changing the return value of the intercepted method: just make =after=
  returns a (possibly) modified return value
- Changing the exception, or even changing it to no exception and return
  value instead: just change =afterThrow= to returns an (possibly
  modified) exception (and maybe an additionnal flag to indicate that we
  want to change the exception by a normal return value)
